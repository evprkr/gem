def update(self, cursor):
    # Print background
    for r in range(0, self.rows + self.border):
        for c in range(0, self.cols):
            self.window.screen.insch(r, c, ' ')

    # Set some margins based on enabled settings
    status_mb = (self.rows - self.margin_bottom) + 1

    # Print empty line chars
    if self.empty_lines:
        for i in range(self.margin_top + self.line_count, status_mb):
            self.window.screen.addstr(i, self.border, '~', curses.A_DIM)

    # Print lines from contents + line numbers (if enabled)
    for row, line in enumerate(self.lines[self.row_offset:self.row_offset + status_mb]):
        if self.line_numbers:
            line_number_offset = self.margin_left + 2
         
            ln_len = len(str(row + self.row_offset + 1))
            ln_pos = line_number_offset - ln_len - 2

            line_number = f"{row + self.row_offset + 1}"

            if cursor.buffer == self and row == (cursor.row - self.row_offset): self.window.screen.addstr(row + self.margin_top, ln_pos, f"{line_number}")
            else: self.window.screen.addstr(row + self.margin_top, ln_pos, f"{line_number}", curses.A_DIM)
        else:
            line_number_offset = self.margin_left + 3

        line_text = line[self.col_offset:self.col_offset + self.cols - line_number_offset]
        self.window.screen.addstr(row + self.margin_top, line_number_offset - 1, f"{line_text}")

    # Print the status line # TODO Turn this into a widget
    if self.status_line:
        for i in range(0, self.cols):
            self.window.screen.addstr(status_mb, i, ' ', curses.A_REVERSE)

        cursor_pos = f"{cursor.row+1}:{cursor.col+1}"
        cursor_mode = f" {cursor.mode} "

        try:
            if cursor.row == 0: buffer_pos = f"TOP "
            elif cursor.row == self.line_count - 2: buffer_pos = f"BOTTOM "
            else: buffer_pos = f"{int((float(cursor.row) / float(self.line_count - 1)) * 100)}% "
        except:
            buffer_pos = f"712% "

        if self.dirty: filename = f"{self.name} *"
        else: filename = f"{self.name}"

        self.window.screen.addstr(status_mb, 0, cursor_mode, curses.A_REVERSE | curses.A_BOLD)
        self.window.screen.addstr(status_mb, len(cursor_mode) + self.margin_left, filename, curses.A_REVERSE)
        self.window.screen.addstr(status_mb, self.cols-(len(cursor_pos)+1) - self.margin_right, cursor_pos, curses.A_REVERSE | curses.A_BOLD)
        self.window.screen.addstr(status_mb, self.cols-((len(cursor_pos)+1) + len(buffer_pos)) - self.margin_right, buffer_pos, curses.A_REVERSE)

    # Print box
    if self.border:
        self.window.screen.box()
        if self.title: self.window.screen.addstr(0, 1, f" {self.name} ")

    # Update and print all widgets
    for widget in self.widgets:
        self.window.screen.addstr(widget.row, widget.col, *widget.update())
